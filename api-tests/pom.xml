<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.company</groupId>
        <artifactId>home-project-blog</artifactId>
        <version>${revision}</version>
        <!--    <relativePath/> &lt;!&ndash; lookup parent from repository &ndash;&gt;-->
    </parent>
    <groupId>com.softserveinc.ita.homeproject</groupId>
    <artifactId>api-tests</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>api-tests</name>
    <description>This module is intended to test backend of Home Project Blog application.</description>

    <properties>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <junit-jupiter-engine.version>5.7.0</junit-jupiter-engine.version>

        <jackson-version>2.12.3</jackson-version>
        <jackson-databind-nullable-version>0.2.1</jackson-databind-nullable-version>
        <junit-version>4.13</junit-version>
        <jsr305-version>3.0.2</jsr305-version>
        <swagger-annotations-version>1.5.22</swagger-annotations-version>
        <jersey-version>2.32</jersey-version>
        <threetenbp-version>2.9.10</threetenbp-version>
        <junit-jupiter-params>5.7.0</junit-jupiter-params>

        <docker.image.postgres>db</docker.image.postgres>
        <docker.image.postgres.internal.port>5432</docker.image.postgres.internal.port>
        <docker.image.postgres.external.port>5435</docker.image.postgres.external.port>
        <docker.image.blog.external.port>8080</docker.image.blog.external.port>
        <docker.image.blog.internal.port>8080</docker.image.blog.internal.port>

        <postgres.db.name>postgres</postgres.db.name>
        <postgres.user>postgres</postgres.user>
        <postgres.password>dfkthrf17</postgres.password>
        <postgres.url>
            jdbc:postgresql://${docker.image.postgres}:${docker.image.postgres.internal.port}/${postgres.db.name}
        </postgres.url>

    </properties>

    <dependencies>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- JSON processing: jackson -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-annotations</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.datatype</groupId>
            <artifactId>jackson-datatype-jsr310</artifactId>
        </dependency>
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>${jackson-databind-nullable-version}</version>
        </dependency>

        <!-- @Nullable annotation -->
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
            <version>${jsr305-version}</version>
        </dependency>

        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-annotations</artifactId>
            <version>${swagger-annotations-version}</version>
        </dependency>


        <!--Random String-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Fix for Java 11 -->
        <dependency>
            <groupId>jakarta.xml.bind</groupId>
            <artifactId>jakarta.xml.bind-api</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.ws.rs</groupId>
            <artifactId>javax.ws.rs-api</artifactId>
            <version>2.1.1</version>
        </dependency>

        <!-- HTTP client: jersey-client -->
        <dependency>
            <groupId>org.glassfish.jersey.core</groupId>
            <artifactId>jersey-client</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.inject</groupId>
            <artifactId>jersey-hk2</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-multipart</artifactId>
        </dependency>
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.joschi.jackson</groupId>
            <artifactId>jackson-datatype-threetenbp</artifactId>
            <version>${threetenbp-version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-log4j2</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>3.0.0-M5</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>0.27.2</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <extensions>true</extensions>
                <configuration>
                    <images>
                        <image>
                            <name>${docker.image.postgres}</name>
                            <build>
                                <from>postgres:alpine</from>
                            </build>
                            <run>
                                <env>
                                    <POSTGRES_USER>${postgres.user}</POSTGRES_USER>
                                    <POSTGRES_PASSWORD>${postgres.password}</POSTGRES_PASSWORD>
                                </env>
                                <ports>
                                    <port>
                                        ${docker.image.postgres.external.port}:${docker.image.postgres.internal.port}
                                    </port>
                                </ports>
                                <wait>
                                    <log>database system is ready to accept connections</log>
                                    <time>30000</time>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                            </run>


                        </image>
                        <image>
                            <name>blog</name>
                            <build>
                                <contextDir>${basedir}/../backend/</contextDir>
                            </build>
                            <run>
                                <env>
                                    <DATASOURCE_URL>${postgres.url}</DATASOURCE_URL>
                                </env>
                                <ports>
                                    <port>${docker.image.blog.external.port}:${docker.image.blog.internal.port}</port>
                                </ports>
                                <wait>
                                    <log>Started BlogApplication</log>
                                    <time>150000</time>
                                </wait>
                                <log>
                                    <enabled>true</enabled>
                                </log>
                                <links>${docker.image.postgres}</links>
                            </run>
                        </image>
                    </images>
                    <verbose>true</verbose>
                </configuration>
                <executions>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                            <goal>build</goal>
                            <goal>start</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>


            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <configuration>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>5.0.1</version>

                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <!--              <inputSpec>../openapi/openapi.yaml</inputSpec>-->
                            <inputSpec>${project.parent.basedir}/openapi/openapi.yaml</inputSpec>
                            <generatorName>java</generatorName>
                            <generateApiTests>false</generateApiTests>
                            <generateModelTests>false</generateModelTests>
                            <configOptions>
                                <java8>true</java8>
                                <dateLibrary>java8</dateLibrary>
                                <library>jersey2</library>
                                <sourceFolder>src/gen/java/main</sourceFolder>
                                <artifactId>home-project-blog-api-client</artifactId>
                                <artifactVersion>${revision}</artifactVersion>
                                <groupId>${project.groupId}</groupId>
                                <modelPackage>com.softserveinc.ita.homeproject.blog.client.model</modelPackage>
                                <apiPackage>com.softserveinc.ita.homeproject.blog.client.api</apiPackage>
                                <invokerPackage>com.softserveinc.ita.homeproject.blog</invokerPackage>
                                <useRuntimeException>true</useRuntimeException>]
                                <openApiNullable>true</openApiNullable>
                            </configOptions>
                            <!--              <templateDirectory>${project.build.resources[0].directory}/mustaches/client</templateDirectory>-->
                            <output>${project.build.directory}/generated-sources/openapi/client</output>
                            <addCompileSourceRoot>true</addCompileSourceRoot>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
