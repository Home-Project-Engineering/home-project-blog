/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.18).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.softserveinc.ita.homeprojectblog.api;

import java.math.BigDecimal;
import com.softserveinc.ita.homeprojectblog.model.Error;
import com.softserveinc.ita.homeprojectblog.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-04-08T10:34:14.997+03:00[Europe/Helsinki]")
@Api(value = "users", description = "the users API")
public interface UsersApi {

    @ApiOperation(value = "Delete user by ID", nickname = "deleteUser", notes = "Delete a user", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "This gets all users", nickname = "getAllUsers", notes = "Return all users with paggination, could be sorted", response = User.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "The payload contains an error", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getAllUsers(@ApiParam(value = "Find by id") @Valid @RequestParam(value = "id", required = false) BigDecimal id
,@ApiParam(value = "Find by name") @Valid @RequestParam(value = "name", required = false) String name
,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* or *name* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id, name, -name", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort
,@ApiParam(value = "") @Valid @RequestParam(value = "page_num", required = false) Integer pageNum
,@ApiParam(value = "") @Valid @RequestParam(value = "page_size", required = false) Integer pageSize
);


    @ApiOperation(value = "Get user by ID", nickname = "getUser", notes = "Returns a user", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUser(@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);


    @ApiOperation(value = "Sign up a new user", nickname = "signUp", notes = "", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<User> signUp(@ApiParam(value = "some parameters" ,required=true )  @Valid @RequestBody User body
);


    @ApiOperation(value = "Update user by ID", nickname = "updateUser", notes = "Updates a user", response = User.class, authorizations = {
        @Authorization(value = "basicAuth")    }, tags={ "users", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = User.class),
        @ApiResponse(code = 400, message = "The payload contains an error", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<User> updateUser(@ApiParam(value = "some parameters" ,required=true )  @Valid @RequestBody User body
,@ApiParam(value = "",required=true) @PathVariable("id") BigDecimal id
);

}
