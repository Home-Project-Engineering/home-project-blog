openapi: 3.0.3

info:
  version: 0.1.1
  title: Home Project Blog Service
  description: |
    Blog for the Home Project engineers

servers:
  - url: /api/1

security:
  - basicAuth: [ ]

tags:
  - name: "users"
  - name: "posts"
  - name: "comments"
  - name: "tags"

paths:
  /users:
    post:
      summary: Sign up a new user
      tags:
        - "users"
      operationId: signUp
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        "201":
          $ref: '#/components/responses/UserResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "default":
          $ref: '#/components/responses/UnknownError'
    get:
      summary: This gets all users
      description: Return all users with paggination, could be sorted
      tags:
        - "users"
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/users_sort'
        - $ref: '#/components/parameters/page_num'
        - $ref: '#/components/parameters/page_size'
      responses:
        "200":
          $ref: '#/components/responses/UsersResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /users/{id}:
    parameters:
      - $ref: '#/components/parameters/p_id'
    get:
      tags:
        - "users"
      summary: Get user by ID
      description: Returns a user
      operationId: getUser
      responses:
        "200":
          $ref: '#/components/responses/UserResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    put:
      tags:
        - "users"
      summary: Update user by ID
      description: Updates a user
      operationId: updateUser
      requestBody:
        $ref: '#/components/requestBodies/UserBody'
      responses:
        "200":
          $ref: '#/components/responses/UserResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    delete:
      tags:
        - "users"
      summary: Delete user by ID
      description: Delete a user
      operationId: deleteUser
      responses:
        "204":
          $ref: '#/components/responses/NoContentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /posts:
    post:
      summary: Create a Post
      tags:
        - "posts"
      operationId: create
      requestBody:
        $ref: '#/components/requestBodies/PostBody'
      responses:
        "201":
          $ref: '#/components/responses/PostResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "default":
          $ref: '#/components/responses/UnknownError'
    get:
      summary: This gets all posts
      tags:
        - "posts"
      operationId: getAllPosts
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/tag_id'
        - $ref: '#/components/parameters/tag_name'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/posts_sort'
        - $ref: '#/components/parameters/page_num'
        - $ref: '#/components/parameters/page_size'
      responses:
        "200":
          $ref: '#/components/responses/PostsResponse'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /posts/{post_id}:
    parameters:
      - $ref: '#/components/parameters/p_id'
    get:
      tags:
        - "posts"
      summary: Find post by ID
      description: Returns a post
      operationId: getPost
      responses:
        "200":
          $ref: '#/components/responses/PostResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    put:
      tags:
        - "posts"
      summary: Update post by ID
      description: Updates a post
      operationId: updatePost
      requestBody:
        $ref: '#/components/requestBodies/PostBody'
      responses:
        "200":
          $ref: '#/components/responses/PostResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    delete:
      tags:
        - "posts"
      summary: Delete post by ID
      description: Delete a post
      operationId: deletePost
      responses:
        "204":
          $ref: '#/components/responses/NoContentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /posts/{post_id}/comments:
    parameters:
      - $ref: '#/components/parameters/p_post_id'
    get:
      summary: This gets all comments to post
      tags:
        - "comments"
      operationId: getAllComments
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/user_name'
        - $ref: '#/components/parameters/user_id'
        - $ref: '#/components/parameters/comments_sort'
        - $ref: '#/components/parameters/page_num'
        - $ref: '#/components/parameters/page_size'
      responses:
        "200":
          $ref: '#/components/responses/CommentsResponse'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    post:
      summary: Leave a Comment
      tags:
        - "comments"
      operationId: leaveAComment
      requestBody:
        $ref: '#/components/requestBodies/CommentBody'
      responses:
        "201":
          $ref: '#/components/responses/CommentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /posts/{post_id}/comments/{id}:
    parameters:
      - $ref: '#/components/parameters/p_post_id'
      - $ref: '#/components/parameters/p_id'
    get:
      tags:
        - "comments"
      summary: Find comment by ID
      description: Returns a single comment
      operationId: getCommentById
      responses:
        "200":
          $ref: '#/components/responses/CommentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    put:
      tags:
        - "comments"
      summary: Update commet by ID
      description: Updates a comment
      operationId: updateComment
      requestBody:
        $ref: '#/components/requestBodies/CommentBody'
      responses:
        "200":
          $ref: '#/components/responses/CommentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
    delete:
      tags:
        - "comments"
      summary: Delete post by ID
      description: Delete a post
      operationId: deleteComment
      responses:
        "204":
          $ref: '#/components/responses/NoContentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /tags:
    get:
      tags:
        - "tags"
      operationId: getAllTags
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/name'
        - $ref: '#/components/parameters/tags_sort'
        - $ref: '#/components/parameters/page_num'
        - $ref: '#/components/parameters/page_size'
      responses:
        "200":
          $ref: '#/components/responses/TagsResponse'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'

  /tags/{id}:
    parameters:
      - $ref: '#/components/parameters/p_id'
    get:
      summary: Find tag by ID
      description: Returns a tag
      tags:
        - "tags"
      operationId: getTag
      responses:
        "200":
          $ref: '#/components/responses/TagResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'
#    put: #todo consider removing this operation as we can just remove the tag if it is wrong
#      tags:
#        - "tags"
#      summary: Update tag by ID
#      operationId: updateTag
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Tag"
#      responses:
#        "200":
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Tag"
#        "400":
#          $ref: '#/components/responses/ValidationError'
#        "404":
#          $ref: '#/components/responses/NotFoundError'
#        "default":
#          $ref: '#/components/responses/UnknownError'
    delete:
      tags:
        - "tags"
      summary: Delete a tag by ID
      operationId: deleteTag
      responses:
        "204":
          $ref: '#/components/responses/NoContentResponse'
        "400":
          $ref: '#/components/responses/ValidationError'
        "404":
          $ref: '#/components/responses/NotFoundError'
        "default":
          $ref: '#/components/responses/UnknownError'

components:
  headers:
    X-Total-Count:
      schema:
        type: number
        format: int64
  schemas:
    User:
      description: This is a user object
      type: object
      required:
        - email
        - name
      properties:
        id:
          type: number
          format: int64
          readOnly: true
        name:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/'
          example: passworD321
        role:
          description: This is the level of user access to various functions
          type: string
          enum:
            - guest
            - user
            - moderator
            - admin
            - expert

    Post:
      type: object
      required:
        - tags
        - title
        - body
        - previewAttachment
      properties:
        id:
          description: User's Id
          type: number
          format: int64
          readOnly: true
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Tag"
        createdOn:
          description: Creation date
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true
        user:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/User"
        text:
          description: "The content of the post."
          type: string
        title:
          description: "Summary of the post."
          type: string
        previewAttachment:
          description: "URL of the resource that will be used as an preview of the Post."
          type: string
        updatedOn:
          description: Updation date
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true

    Comment:
      required:
        - body
        - user
        - postId
        - text
      properties:
        id:
          description: Comment's Id
          type: number
          format: int64
          readOnly: true
        user:
          $ref: "#/components/schemas/User"
        text:
          description: Comment's text
          type: string
        createdOn:
          description: Creation date
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true
        postId:
          description: "The id of the Post that exists in the blog."
          type: number
          format: int64
        updatedOn:
          description: Date of update
          type: string
          example: "2017-07-21T17:32:28Z"
          format: date-time
          readOnly: true

    Tag:
      required:
        - name
      type: object
      properties:
        id:
          type: number
          format: int64
          readOnly: true
        name:
          description: "Tag"
          type: string

    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message

  responses:
    NoContentResponse:
      description: The request was succesfully processed.
    TagResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Tag"
    CommentResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"
    PostResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"
    UserResponse:
      description: OK
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"
    CommentsResponse:
      description: OK
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Comment"
    UsersResponse:
      description: OK
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"
    PostsResponse:
      description: OK
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Post"
    TagsResponse:
      description: OK
      headers:
        X-Total-Count:
          $ref: '#/components/headers/X-Total-Count'
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Tag"
    ValidationError:
      description: The payload contains an error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnknownError:
      description: The unknown error appeard. Check your payload or contact support.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  requestBodies:
    CommentBody:
      description: some parameters
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Comment"
    PostBody:
      description: some parameters
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Post"
    UserBody:
      description: some parameters
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/User"

  parameters:
    p_id:
      in: path
      name: id
      schema:
        type: number
        format: int64
      required: true
    p_post_id:
      in: path
      name: post_id
      schema:
        type: number
        format: int64
      required: true
    page_num:
      in: query
      name: page_num
      schema:
        type: integer
    page_size:
      in: query
      name: page_size
      schema:
        type: integer
    id:
      in: query
      name: id
      description: Find by id
      schema:
        type: number
        format: int64
    name:
      in: query
      name: name
      description: Find by name
      schema:
        type: string
    user_name:
      in: query
      name: user_name
      description: Find by user name
      schema:
        type: string
    tag_name:
      in: query
      name: tag_name
      description: Find by tag name
      schema:
        type: string
    user_id:
      in: query
      name: user_id
      description: Find by user id
      schema:
        type: string
    tag_id:
      in: query
      name: tag_id
      description: Find by tag id
      schema:
        type: string
    tags_sort:
      in: query
      name: sort
      description: |
        In order to execute *asc*, you need to specify in the search *id* or *name* parameter.
        In order to complete the *desc* sorting must be specified in the query parameter *-id*
      schema:
        type: string
        enum: [ "id", "-id", "name", "-name" ]
        default: "name"
    users_sort:
      in: query
      name: sort
      description: |
        In order to execute *asc*, you need to specify in the search *id* or *name* parameter.
        In order to complete the *desc* sorting must be specified in the query parameter *-id*
      schema:
        type: string
        enum: [ "id", "-id", "name", "-name" ]
        default: "-id"
    posts_sort:
      in: query
      name: sort
      description: |
        In order to execute *asc*, you need to specify in the search *id* or *title* parameter.
        In order to complete the *desc* sorting must be specified in the query parameter *-id*
      schema:
        type: string
        enum: [ "id", "-id", "title", "-title" ]
        default: "-id"
    comments_sort:
      in: query
      name: sort
      description: |
        In order to execute *asc*, you need to specify in the search *id* parameter.
        In order to complete the *desc* sorting must be specified in the query parameter *-id*
      schema:
        type: string
        enum: [ "id", "-id" ]
        default: "-id"

  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
