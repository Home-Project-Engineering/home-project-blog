/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.homeproject.blog.backend.presentationlayer.controllers;

import com.homeproject.blog.backend.presentationlayer.model.Comment;
import com.homeproject.blog.backend.presentationlayer.model.Error;
import com.homeproject.blog.backend.presentationlayer.model.Post;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "posts", description = "the posts API")
public interface PostsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /posts/{post_id}/comments : Create Comment
     * Create a new Comment.
     *
     * @param postId  (required)
     * @param comment  (required)
     * @return OK (status code 201)
     *         or The payload contains an error. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Create Comment", nickname = "createComment", notes = "Create a new Comment.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Comment> createComment(@ApiParam(value = "",required=true) @PathVariable("post_id") Long postId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Comment comment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"createdOn\" : \"2017-07-21T17:32:28Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /posts : Create Post
     * Create a new Post.
     *
     * @param post  (required)
     * @return OK (status code 201)
     *         or The payload contains an error. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Create Post", nickname = "createPost", notes = "Create a new Post.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Post> createPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Post post) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"previewAttachment\" : \"previewAttachment\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"title\" : \"title\", \"createdOn\" : \"2017-07-21T17:32:28Z\", \"tags\" : [ { \"name\" : \"Java8\", \"id\" : 6 }, { \"name\" : \"Java8\", \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /posts/{post_id}/comments/{id} : Get Comment by ID.
     * Retrieves an existing Comment associated with the specified ID.
     *
     * @param postId  (required)
     * @param id  (required)
     * @return OK (status code 200)
     *         or The payload contains an error. (status code 400)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Get Comment by ID.", nickname = "getComment", notes = "Retrieves an existing Comment associated with the specified ID.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Comment> getComment(@ApiParam(value = "",required=true) @PathVariable("post_id") Long postId,@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"createdOn\" : \"2017-07-21T17:32:28Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /posts/{post_id}/comments : Get comments
     * Uses query keys to retrieve a subset of existing comments.
     *
     * @param postId  (required)
     * @param id  (optional)
     * @param authorName  (optional)
     * @param sort In order to execute *asc*, you need to specify in the search *id* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id*  (optional, default to -id)
     * @param pageNum  (optional, default to 0)
     * @param pageSize  (optional, default to 10)
     * @return OK (status code 200)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Get comments", nickname = "getComments", notes = "Uses query keys to retrieve a subset of existing comments.", response = Comment.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Comment>> getComments(@ApiParam(value = "",required=true) @PathVariable("post_id") Long postId,@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) Long id,@ApiParam(value = "") @Valid @RequestParam(value = "author_name", required = false) String authorName,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort,@ApiParam(value = "", defaultValue = "0") @Valid @RequestParam(value = "page_num", required = false, defaultValue="0") Integer pageNum,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "page_size", required = false, defaultValue="10") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"createdOn\" : \"2017-07-21T17:32:28Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /posts/{id} : Get Post by ID
     * Retrieves an existing Post associated with the specified ID.
     *
     * @param id  (required)
     * @return OK (status code 200)
     *         or The payload contains an error. (status code 400)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Get Post by ID", nickname = "getPost", notes = "Retrieves an existing Post associated with the specified ID.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Post> getPost(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"previewAttachment\" : \"previewAttachment\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"title\" : \"title\", \"createdOn\" : \"2017-07-21T17:32:28Z\", \"tags\" : [ { \"name\" : \"Java8\", \"id\" : 6 }, { \"name\" : \"Java8\", \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /posts : Get posts
     * Uses query keys to retrieve a subset of existing posts.
     *
     * @param id  (optional)
     * @param tagId  (optional)
     * @param tagName  (optional)
     * @param authorName  (optional)
     * @param sort In order to execute *asc*, you need to specify in the search *id* or *title* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id*  (optional, default to -id)
     * @param pageNum  (optional, default to 0)
     * @param pageSize  (optional, default to 10)
     * @return OK (status code 200)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Get posts", nickname = "getPosts", notes = "Uses query keys to retrieve a subset of existing posts.", response = Post.class, responseContainer = "List", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Post>> getPosts(@ApiParam(value = "") @Valid @RequestParam(value = "id", required = false) Long id,@ApiParam(value = "") @Valid @RequestParam(value = "tag_id", required = false) Long tagId,@ApiParam(value = "") @Valid @RequestParam(value = "tag_name", required = false) String tagName,@ApiParam(value = "") @Valid @RequestParam(value = "author_name", required = false) String authorName,@ApiParam(value = "In order to execute *asc*, you need to specify in the search *id* or *title* parameter. In order to complete the *desc* sorting must be specified in the query parameter *-id* ", allowableValues = "id, -id, title, -title", defaultValue = "-id") @Valid @RequestParam(value = "sort", required = false, defaultValue="-id") String sort,@ApiParam(value = "", defaultValue = "0") @Valid @RequestParam(value = "page_num", required = false, defaultValue="0") Integer pageNum,@ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "page_size", required = false, defaultValue="10") Integer pageSize) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"previewAttachment\" : \"previewAttachment\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"title\" : \"title\", \"createdOn\" : \"2017-07-21T17:32:28Z\", \"tags\" : [ { \"name\" : \"Java8\", \"id\" : 6 }, { \"name\" : \"Java8\", \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /posts/{post_id}/comments/{id} : Remove Comment
     * Deletes a Comment associated with a specified ID.
     *
     * @param postId  (required)
     * @param id  (required)
     * @return The request was succesfully processed. (status code 204)
     *         or The payload contains an error. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Remove Comment", nickname = "removeComment", notes = "Deletes a Comment associated with a specified ID.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> removeComment(@ApiParam(value = "",required=true) @PathVariable("post_id") Long postId,@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /posts/{id} : Remove Post
     * Deletes a Post associated with a specified ID.
     *
     * @param id  (required)
     * @return The request was succesfully processed. (status code 204)
     *         or The payload contains an error. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Remove Post", nickname = "removePost", notes = "Deletes a Post associated with a specified ID.", authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "The request was succesfully processed."),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> removePost(@ApiParam(value = "",required=true) @PathVariable("id") Long id) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /posts/{post_id}/comments/{id} : Update Comment
     * Updates information on a Comment that exists in the system by the specified ID and post ID.
     *
     * @param postId  (required)
     * @param id  (required)
     * @param comment  (required)
     * @return OK (status code 200)
     *         or The payload contains an error. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Update Comment", nickname = "updateComment", notes = "Updates information on a Comment that exists in the system by the specified ID and post ID.", response = Comment.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Comments", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Comment.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{post_id}/comments/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Comment> updateComment(@ApiParam(value = "",required=true) @PathVariable("post_id") Long postId,@ApiParam(value = "",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Comment comment) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"createdOn\" : \"2017-07-21T17:32:28Z\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /posts/{id} : Update Post
     * Updates information on a Post that exists in the system by the specified ID.
     *
     * @param id  (required)
     * @param post  (required)
     * @return OK (status code 200)
     *         or The payload contains an error. (status code 400)
     *         or Unauthorized. (status code 401)
     *         or Forbidden. (status code 403)
     *         or The specified resource was not found. (status code 404)
     *         or The unknown error appeard. Check your payload or contact support. (status code 200)
     */
    @ApiOperation(value = "Update Post", nickname = "updatePost", notes = "Updates information on a Post that exists in the system by the specified ID.", response = Post.class, authorizations = {
        @Authorization(value = "basicAuth")
    }, tags={ "Posts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Post.class),
        @ApiResponse(code = 400, message = "The payload contains an error.", response = Error.class),
        @ApiResponse(code = 401, message = "Unauthorized.", response = Error.class),
        @ApiResponse(code = 403, message = "Forbidden.", response = Error.class),
        @ApiResponse(code = 404, message = "The specified resource was not found.", response = Error.class),
        @ApiResponse(code = 200, message = "The unknown error appeard. Check your payload or contact support.", response = Error.class) })
    @RequestMapping(value = "/posts/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Post> updatePost(@ApiParam(value = "",required=true) @PathVariable("id") Long id,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Post post) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"author\" : \"\", \"previewAttachment\" : \"previewAttachment\", \"id\" : 0, \"text\" : \"text\", \"updatedOn\" : \"2017-07-21T17:32:28Z\", \"title\" : \"title\", \"createdOn\" : \"2017-07-21T17:32:28Z\", \"tags\" : [ { \"name\" : \"Java8\", \"id\" : 6 }, { \"name\" : \"Java8\", \"id\" : 6 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
